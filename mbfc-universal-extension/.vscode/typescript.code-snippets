{
    // Place your mbfc-chrome-extension workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Case": {
        "prefix": "cse",
        "body": ["case $1Method:", "    return new $1($0).handle();"],
        "description": "Case"
    },
    "Create debug log": {
        "prefix": "rdebug",
        "body": ["const log = require('debug')('ext:$TM_FILENAME_BASE');", ""],
        "description": "Create debug log"
    },
    "Instantiate Method Class": {
        "prefix": "imclass",
        "body": [
            "const i$1Message = new $1Message();",
            "i$1Message.registerHandler((request, sendResponse) => {",
            "    // Process Request Here",
            "    sendResponse();",
            "});"
        ],
        "description": "Instantiate Method Class"
    },
    "Create Method Class": {
        "prefix": "mclass",
        "body": [
            "import debug from \"debug\";",
            "import { isDevMode } from \"../utils",
            "import { HandlerCallbackType, IEmptyMessageRequest } from \".\";",
            "",
            "isDevMode();",
            "const log = debug(\"ext$1Message\");",
            "",
            "const $1MessageMethod = \"$1\";",
            "",
            "export class $1Message {",
            "    constructor(fn: HandlerCallbackType) {",
            "        chrome.runtime.onMessage.addListener(async (request: IEmptyMessageRequest, sender, sendResponse) => {",
            "            if (request.method === $1MessageMethod) {",
            "                log(`Received \\${$1MessageMethod}Message`);",
            "                const result: any = await fn(request);",
            "                sendResponse(result);",
            "            }",
            "        });",
            "    }",
            "",
            "    static async SendMessage(): Promise<$2> {",
            "        try {",
            "            log(`Sending \\$1`);",
            "            const params: IEmptyMessageRequest = {",
            "                method: $1MessageMethod,",
            "            };",
            "            return new Promise(resolve => chrome.runtime.sendMessage(params, resolve));",
            "        } catch (err) {",
            "            console.log(err);",
            "        }",
            "    }",
            "}",
            ""
        ],
        "description": "Create Method Class"
    }
}
