{
  // Place your mbfc-universal-extension workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Message": {
    "prefix": "bmsg0",
    "body": [
      "const log = require(\"debug\")(\"mbfc:utils:messages:$1Message\");",
      "",
      "import { get } from \"lodash-es\";",
      "import { ISource } from \"@/utils/definitions\";",
      "",
      "const $1MessageMethod = \"$1Message\";",
      "",
      "export type Handler$1Callback = (response: $1Message) => void;",
      "",
      "export class $1Message {",
      "  public method = $1MessageMethod;",
      "",
      "  static check(request: any, fn: Handler$1Callback) {",
      "    if (get(request, \"method\") === $1MessageMethod) {",
      "      return fn(request);",
      "    }",
      "  }",
      "",
      "  constructor() {",
      "    this.method = $1MessageMethod;",
      "  }",
      "}",
      ""
    ],
    "description": "Message"
  },
  "Message1": {
    "prefix": "bmsg1",
    "body": [
      "const log = require(\"debug\")(\"mbfc:utils:messages:$1Message\");",
      "",
      "import { get } from \"lodash-es\";",
      "import { ISource } from \"@/utils/definitions\";",
      "",
      "const $1MessageMethod = \"$1Message\";",
      "",
      "export type Handler$1Callback = (response: $1Message) => void;",
      "",
      "export class $1Message {",
      "  public method = $1MessageMethod;",
      "  public $2: $3;",
      "",
      "  static check(request: any, fn: Handler$1Callback) {",
      "    if (get(request, \"method\") === $1MessageMethod) {",
      "      return fn(request);",
      "    }",
      "  }",
      "",
      "  constructor($2: $3) {",
      "    this.method = $1MessageMethod;",
      "    this.$2 = $2;",
      "  }",
      "}",
      ""
    ],
    "description": "Message1"
  },
  "Message2": {
    "prefix": "bmsg2",
    "body": [
      "const log = require(\"debug\")(\"mbfc:utils:messages:$1Message\");",
      "",
      "import { get } from \"lodash-es\";",
      "import { ISource } from \"@/utils/definitions\";",
      "",
      "const $1MessageMethod = \"$1Message\";",
      "",
      "export type Handler$1Callback = (response: $1Message) => void;",
      "",
      "export class $1Message {",
      "  public method = $1MessageMethod;",
      "  public $2: $3;",
      "  public $4: $5;",
      "",
      "  static check(request: any, fn: Handler$1Callback) {",
      "    if (get(request, \"method\") === $1MessageMethod) {",
      "      return fn(request);",
      "    }",
      "  }",
      "",
      "  constructor($2: $3, $4: $5) {",
      "    this.method = $1MessageMethod;",
      "    this.$2 = $2;",
      "    this.$4 = $4;",
      "  }",
      "}",
      ""
    ],
    "description": "Message"
  },
  "Message3": {
    "prefix": "bmsg3",
    "body": [
      "const log = require(\"debug\")(\"mbfc:utils:messages:$1Message\");",
      "",
      "import { get } from \"lodash-es\";",
      "import { ISource } from \"@/utils/definitions\";",
      "",
      "const $1MessageMethod = \"$1Message\";",
      "",
      "export type Handler$1Callback = (response: $1Message) => void;",
      "",
      "export class $1Message {",
      "  public method = $1MessageMethod;",
      "  public $2: $3;",
      "  public $4: $5;",
      "  public $6: $7;",
      "",
      "  static check(request: any, fn: Handler$1Callback) {",
      "    if (get(request, \"method\") === $1MessageMethod) {",
      "      return fn(request);",
      "    }",
      "  }",
      "",
      "  constructor($2: $3, $4: $5, $6: $7) {",
      "    this.method = $1MessageMethod;",
      "    this.$2 = $2;",
      "    this.$4 = $4;",
      "    this.$6 = $6;",
      "  }",
      "}",
      ""
    ],
    "description": "Message"
  }
}
